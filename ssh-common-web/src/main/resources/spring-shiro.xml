<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--配置与web.xml中对应的Filter的bean-->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/security/login"/>
        <!--认证成功统一跳转到index.jsp(建议不配置, 由Shiro自动跳转到上一个请求路径)-->
        <property name="successUrl" value="/"/>
        <!--
            注意：当配置了Shiro权限注解后, 下面的配置将不起作用, 即当用户访问没有被授权的资源时将不会跳转到指定的路径
            而是在页面显示org.apache.shiro.authz.UnauthorizedException异常信息.
            解决方案：在struts.xml配置文件中添加以下配置来拦截Shiro异常信息以实现跳转.
            <global-results>
                <result name="unauthorizedException">/error/authzRefuse.jsp</result>
            </global-results>
            <global-exception-mappings>
                <exception-mapping result="unauthorizedException" exception="org.apache.shiro.authz.UnauthorizedException"/>
            </global-exception-mappings>
        -->
        <property name="unauthorizedUrl" value="/error/authzRefuse.jsp"/>
        <property name="filters">
            <map>
                <entry key="authc" value-ref="simpleFormAuthenticationFilter"/>
            </map>
        </property>
        <property name="filterChainDefinitionMap">
            <map>
                <!--静态资源的匿名访问-->
                <entry key="/favicon.ico" value="anon"/>
                <entry key="/assets/**" value="anon"/>
                <entry key="/captcha/**" value="anon"/>
                <entry key="/error/**" value="anon"/>
                <!--/security/logout对应的Java类可以不存在-->
                <entry key="/security/logout" value="logout"/>
                <!--配置记住我或认证通过可以访问的地址-->
                <entry key="/portal/**" value="user"/>
                <entry key="/**" value="authc"/>
            </map>
        </property>
        <!--
        <property name="filterChainDefinitions">
            <value>
                /favicon.ico=anon
                /assets/**=anon
                /captcha/**=anon
                /error/**=anon
                /security/logout=logout
                /portal/**=user
                /**=authc
            </value>
        </property>
        -->
    </bean>

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- Single realm app. If you have multiple realms, use the 'realms' property instead. -->
        <property name="realm" ref="simpleAuthorizingRealm"/>
        <property name="cacheManager" ref="cacheManager"/>
        <property name="sessionManager" ref="sessionManager"/>
        <property name="rememberMeManager" ref="rememberMeManager"/>
        <!--
            By default the servlet container sessions will be used.
            Uncomment this line to use shiro's native sessions.
        -->
        <!-- <property name="sessionMode" value="native"/> -->
    </bean>

    <!-- Define the realm you want to use to connect to your back-end security datasource. -->
    <bean id="simpleAuthorizingRealm" class="com.ssh.common.web.security.SimpleAuthorizingRealm">
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
    </bean>

    <bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <property name="hashAlgorithmName" value="md5"/>
        <property name="hashIterations" value="1"/>
    </bean>

    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache-shiro.xml"/>
    </bean>

    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="globalSessionTimeout" value="600000"/>
        <property name="deleteInvalidSessions" value="true"/>
    </bean>

    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <property name="cookie" ref="cookie"/>
    </bean>

    <bean id="cookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="rememberMe"/>
        <property name="maxAge" value="2592000"/>
    </bean>

    <bean id="simpleFormAuthenticationFilter" class="com.ssh.common.web.security.SimpleFormAuthenticationFilter">
        <property name="usernameParam" value="username"/>
        <property name="passwordParam" value="password"/>
        <property name="captchaParam" value="captcha"/>
        <property name="rememberMeParam" value="rememberMe"/>
    </bean>

    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!--
    In both standalone and web applications, you might want to use Shiro's Annotations for security checks. For example, @RequiresRoles, @RequiresPermissions, etc.
    This requires Shiro's Spring AOP integration to scan for the appropriate annotated classes and perform security logic as necessary.
    See <a>http://shiro.apache.org/spring.html</a> for more details.
    -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true"/>
    </bean>

    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <aop:aspectj-autoproxy proxy-target-class="true"/>

</beans>
